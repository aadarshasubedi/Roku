.Roku
旧 Rokuはクラスベースのコンパイラだったが、スロット周りの仕様をややこしくし過ぎたため
パーサとコード生成部を一部作り直しシンプルな言語にすることが目的
名前は気に入ってたのでRokuのままにしたい

* 型のみ実装し、クラスは実装しない
* 関数の仕様はシンプルにする、スロットの実装はすべて消す
* 総称型は残す
* インデントベースのパーサを使ってみる
* ifは文として実装する
* 先行評価の静的型付け言語に戻す
* CILのコード生成を優先的に実装する
* VS2015のVBでコードを全面的に書き直す(旧 RokuはVS2005/.NET Framework2だから色々面倒だった)
* ソース管理にGitを使ってみる



.パース部(Parse)
ソースコードをNodeツリーに変換する
若干文法変えているが基本は変わらない

スロットのややこしい仕様をなくしたためFunctionNodeは直接関数本体(BlockNode)を持つ
今回IScopeNodeの実装はBlockNodeしかいらない

関数本体はIRunnableNodeを廃止し、IEvaluableNodeの配列で持つ
if文のように戻り値を持たないものもIEvaluableNodeでTypeをVoidにでもしておけばいい
IRunnableNodeをリンクリストで持つ従来の形式は.NETでは扱いがめんどくさかったので
IEvaluableNodeはListで持つように変更する

名前空間をCompilerにせずParserとかにして
後続のファイルと保存フォルダ分けたい


.名前解決(NameResolve)
ほぼそのまま使えるはず

直接は関係ないけどNodeOperatorを実装しなおす
名前解決から翻訳までNodeOperatorを継承して処理を作っているが
継承しなくても使えるようにならないか?
昔のVBの構文ではこの程度で妥協してたけど、今ではちょっとダサい

旧のMain.vbのエラートラップが非常にダサい
複数のエラー発生をトラップすることを前提にし
CatchErrorイベントを各 名前解決〜翻訳までのインスタンスごとにAddHandlerしている
なんとかできないのか?

やりたいことは、エラーが発生したらThrowして復帰可能な位置でCatchしてエラー表示して
次の処理をした後に各処理が一段落したらアベンドする


.正規化(Normalize)
これもほぼそのまま使えるはず


.クロージャー変換(Closure)
これもほぼそのまま使えるはず

RIRでは次のようなクロージャをフレームとbindを使って変換する
これを行うために旧 Rokuではbindをメソッドとして実装していた
bindの実装を検討する

sub f1(x: Int) {}
	var y = 1
	return(f2)
	sub f2()
		var z = 2
		print(f3())
		sub f3() Int
			return(x + y + z)
↓
sub f1(x: Int) {}
	var frame = f1_Frame()
	frame.x = x
	frame.y = 1
	return(f2.bind(frame)) # return(bind(f2, frame))にするか？
	sub f2(c1: f1_Frame)
		var frame = f2_Frame()
		frame.z = 2
		print(f3.bind(c1, frame)()) # return(bind(f3, c1, frame))にするか？
		sub f3(c1: f1_Frame, c2: f2_Frame) Int
			return(c1.x + c1.y + c2.z)


.型付け(Typing)
だいぶ変えないといけない
とりあえず型(struct)と関数だけ実装する
総称型は後でもいい

型チェックを直さないといけないがだいぶ後でいい


.中間コード翻訳(Translater)
OpCodeという名前は.NETの名前とかぶっていたのでRkCodeに変更する
それに伴いOpのプレフィックスはRkに変更する

OpCodeはそれぞれOpCode0を基本型にし、4つに分けていた
  OpCode0・・・コードのみ(NOPやRETURNなど)
  OpCode1・・・コードと戻り値のみ(RETURN)
  OpCode2・・・コードと戻り値と引数1(単項演算のMULなど)
  OpCode3・・・コードと戻り値と引数2(ADDやMULなど)
この形式ではコードと型のチェックをしコード出力を行っていたため、分岐が増えた
1つのコードには1つの引数形式を持たせる
コードを分けないといけないのはRETURN(引数ありなし)と単項演算子ぐらいである
RkCodeでは上記をふまえRETURN_0とRETURN1、MUL_1とMULを作る
3番地コード形式のみしか用意しない


.コード出力(Assemble)
RIRはなくてもいい、CILから作る
最適化はだいぶ後でいい

元はクラスベースであったためCILでもクラスを作っていたが
全てshared functionで作るか??


.設計方針

オブジェクト指向は弊害が多いため最小限にとどめる

* クラスメンバ変数はほぼPublicにする
* Privateなメンバ変数はアクセサを作るか関数にする
* クラスメンバ関数は非破壊関数にする
  破壊関数は戻り値なしにする
* コンストラクタはなるべく作らない、呼び出し側でNew Withする
* 初期化以外のタイミングでなるべくクラスメンバ変数への再代入を避ける
* できればデータ定義するクラスには処理を書かず、操作のみするStaticな関数を設ける
* なるべく継承は用いない
* 他のオブジェクトを参照するメンバ関数はなるべく作らない
  処理の主体が自オブジェクトなら作って構わない

.総称型を使うために

struct Foo(@T1, @T2)
	var a : Int
	var b : @T1
	var c : @T2
var x = Foo.of Int String
var y = Foo.of String Bar
sub f1.of(@T1, @T2)(m : Foo.of @T1 @T2)
	print m
f1 x
var fx = f1.of Baz Int
struct Hoge(@T1)
	var a : Foo.of Int @T
↓
Dim Foo As New RkStruct With {.Name = "Foo"}
Foo.AddVar("a", Int)
Foo.AddVar("b", Foo.DefineGeneric("@T1"))
Foo.AddVar("c", Foo.DefineGeneric("@T2"))
Dim x = Foo.FixedGeneric(Int, String)
Dim y = Foo.FixedGeneric(String, Bar)
Dim f1 As New RkFunction With {.Name = "f1"}
f1.Arguments.Add("m", Foo.FixedGeneric(f1.DefineGeneric("@T1"), f1.DefineGeneric("@T2")))
f1.FixedGeneric(x)
Dim fx = f1.FixedGeneric(Baz, Int)
Dim Hoge As New RkStruct With {.Name = "Hoge"}
Hoge.AddVar("a", Foo.FixedGeneric(Int, Hoge.DefineGeneric("@T")))

.Namespaceと型の実装

RkNamespaceはuse、struct、sub、namespaceを持つ
RkStructはletしか持たない(letの初期化はコンストラクタという特別なsubを持つ)
RkFunctionはlet、struct、subを持つ

struct RkNamespace
    var Local    = Dictionary(String, RkStruct | RkFunction | RkNamespace)
    var LoadPath = List(RkStruct | RkNamespace)

struct RkStruct
    var Vars = Dictionary(String, LetNode)
    var Ctor = RkFunction()

struct RkFunction
    var Local = Dictionary(String, RkStruct | RkFunction | LetNode)


.総称型の実装

総称型はC++のテンプレートのインライン展開(だっけ？)のように扱う

sub add(a: @T, b: @T) @T
    return(a + b)
add(1, 2)     #=> 3
add("a", "b") #=> ab
add(Hoge(), Hoge()) #=> ERROR!!

総称型に特に制約のない限り、add関数の定義時点では「a + b」という構文は問題ない
IntやString同士には「+」関数が定義されているため「add(1, 2)」「add("a", "b")」という呼び出しは間違いではない
ただHoge型の足し算は未定義のため「add(Hoge(), Hoge())」という呼び出しの時点でエラーとしたい

従来「型付け→中間コード翻訳」という順に処理をしていたが
逆にするか、型付けの前に呼び出し側を展開する処理を挟む必要がある

..型付けの前にする事

sub add(a: @T, b: @T) @T を

sub add(a: Int, b: Int) Int と
sub add(a: String, b: String) String と
sub add(a: Hoge, b: Hoge) Hoge を作る

型付けで
sub add(a: Hoge, b: Hoge) Hoge がエラーになればよい
エラーメッセージは「add(Hoge(), Hoge())」の行がエラーと出たほうがいい

..中間コード翻訳について

sub add(a: @T, b: @T) @T を中間コードに落とす必要はなくなる
インライン展開するわけだからコードサイズは大きくなる
内部的に関数のオーバーロードが出来ないといけない

.中間コード翻訳、コード出力について

中間コードにする際、従来 Node→RIR としていたが
総称型の解決のために Node→RkFunction を呼び出しごとに作っている

総称型を解決した際にキャッシュを作り Node→RkFunction(@T)→RkFunction という流れを作る

..別案 2016/01/04

Node→RkFunction(@T)→RkFunction だと中間コード翻訳時点でNodeのStatementsが
型が確定していない
中間コード作成時にまた解決とかを行わないといけないのでめんどくさい

すこし無駄が増えるが下記モデルのほうが後続処理がやりやすい
Node(@T)→RkFunction(@T)
  ├→Node(Int)→RkFunction(Int)
  └→Node(String)→RkFunction(String)

この場合、総称型に依存しないインナー関数はNode(@T)にあったほうが無駄がないとか
改善案はあるが、とりあえずこの形にしてみる

RkFunctionに用意した @T() -> RkFunction は消して
Nodeに @T -> Node を用意する
RkFunction.DefineGeneric はそのまま残すが、Node.DefineGeneric 相当を作る

多段階に展開されるとこうなる？
sub f1(a: @T) @T
	return(a)
sub f2(a: @T2) @T2
	return(f1(a))
var a = f2(1)

Node(f1 @T)→RkFunction(@T)
  └→Node(f1 @T2)→RkFunction(@T2)
      └→Node(f1 Int)→RkFunction(Int)
Node(f2 @T2)→RkFunction(@T2)
  └→Node(f2 Int)→RkFunction(Int)

欠点：
  名前解決、クロージャー変換を再実行しないとちゃんとならない
  これをさぼると結局めんどくさい

..別案 2016/01/05

中間コード翻訳で部分的な型解決(RkGenericEntryに限る)をできるようにする
RkGenericEntry.Referenceに解決後の型を入れる

FunctionNode(@T1, @T2)→RkFunction(@T1, @T2)
これを
FunctionCallNode(t1, t2)
FunctionCallNode(t3, t4)
から
FunctionNode(@T1, @T2)→RkFunction(@T1, @T2)
  ├→Cache(t1, t2)→RkFunction(t1, t2)
  └→Cache(t3, t4)→RkFunction(t3, t4)
となる

sub f(FunctionNode, FunctionCallNode)->RkFunction
が必要になる
処理は簡単に書くとこうなる
(FunctionNode, FunctionCallNode) => @T[]
(FunctionNode, RkFunction, @T[]) => RkFunction'
FunctionNode.Cache(@T[] -> RkFunction')

一度で解決しきれない時が若干面倒
sub f1(a: @T1, b: @T2)
sub f2(c: @T3)
	f1(1, c)
f2(2)

sub translation(node)
	if node is FunctionNode
		func_translation(node)
	else if node is FunctionCallNode
		call_translation(node)
	else
		...
sub func_translation(node: FunctionNode)
	if !node.IsGeneric
		func_translation'(node, @T[])
sub func_translation'(node: FunctionNode, types: @T[])
	var needs   = node.FixedParameter(types)
	var rk_func = node.FixedGeneric(needs)
	if !rk_func.Completed
		rk_func ...
		rk_func.Completed = true
		node.Cache(needs, rk_func)
sub call_translation(node: FunctionCallNode)
	node.Function = func_translation'(node.Expression.Type: FunctionNode, node.Arguments)

.関数の呼び出し

関数の呼び出し方法は何パターンかある

まずレシーバを伴わない関数呼び出し

struct Hoge
	var a = 1
sub f()
	return(1)

f()            # 関数名をそのままコールする、FunctionCallNode->FunctionNodeとなる
print()        # システム組み込みの関数をコールする、FunctionCallNode->VariableNodeとなり関数の検索が必要
var x = f
x()            # 変数経由でコールする、FunctionCallNode->VariableNode(RkFunction)となり関数の検索が不要
var h = Hoge() # 構造体の作成をする、FunctionCallNode->StructNodeとなる、#Allocという特別な関数を呼び出す
var y = Hoge
y()            # 変数経由で構造体の作成をする、FunctionCallNode->VariableNode(RkStruct)となる


..レシーバを伴う関数の呼び出し

いわゆるメソッドの実装方法
今回クラスは実装しないが、メソッドの書き方は取り入れたい

よくあるクラス型のメソッドの悪い点はこれにつきる
* クラス定義とメソッドは同時に記述する、つまりクラス記述者しかメソッドを増やせない
  動的言語ならメソッドを追加できるものもある
  最近の.NET系ではExtensionがありメソッド追加に見せかけることもできる

メソッドを追加できないためこういう問題が起こる

* メソッドは1クラスづつにしか追加できない(独自メソッドは継承して追加する
  スーパークラスに追加して派生クラスで使うことはできない
* 組み込み型にメソッドが追加できない、IntやString型に独自メソッドを定義できない

例えばgrep、map、sort、do関数を順に呼び出す場合
do(sort(map(grep([1, 2, 3], x => x > 1), x => "" + x)), x => print(x)) となる
Haskellならdo関数なんてないけど、勢いで書くとこんな感じ
do (x -> print x) $ sort $ grep (x -> x > 1) $ map [1, 2, 3] こうかな
右から順に考えていくのが嫌だ

レシーバが使えるなら自然と左から順になる
[1, 2, 3].grep(x => x > 1).map(x => "" + x).sort().do(x => print(x))

..対応案 2016/01/23

第一引数をレシーバにできる

sub grep(self: @T[], f: (@T => Bool)) @T[]
sub map(self: @T[], f: (@T => @R)) @R[]
sub sort(self: @T[]) @T[]
sub do(self: @T[], f: (@T))
があるとき

[1, 2, 3].grep(x => x > 1).map(x => "" + x).sort().do(x => print(x))
としてよい

欠点:
こうしてもよいわけで、どちらでもいいというのは一貫性がない
do(sort(map(grep([1, 2, 3], x => x > 1), x => "" + x)), x => print(x))

..対応案 2016/01/24

メソッドと関数は表記を変える、メソッド形式でしか呼び出せなくする
レシーバはselfという名前を自動でつける
sub @T[].map(f: (@T=>@R)) @R[]
sub @T[].grep(f: (@T=>Bool)) @T[]
sub @T[].sort(f: @T[]) @T[]
sub @T[].do(f: (@T))

欠点:
レシーバ変数名が固定になる

利点:
よりメソッドっぽくなる
sub String.compare(a: String) Bool

.構造体の総称型対応

struct Hoge(@T1, @T2)

sub fa(a: @Ta) Hoge(@Ta, Int)
sub fb(a: @Tb) Hoge(String, @Tb)
sub fc(a: @Tc, @Td) Hoge(@Tc, @Td)
sub fd(a: @Te) Hoge(@Te, Int)

x = fa(Int)
y = fc(Int, Int)
z = fb(Int)
w = fd(String)

関数の戻り値の型は
fa(Int)->Hoge(Int, Int) と
fc(Int, Int)->Hoge(Int, Int) は同じ型として扱いたい

fb(Int)->Hoge(String, Int) と
fd(String)->Hoge(String, Int) も同じ型になる

ただしHoge(@Ta, Int) と Hoge(@Te, Int)は同じでもいい？？

Applyは解決した型だけでなく、解決していない型も持つ
FixedGenericは次の通り動く
+ 解決したい型のApplyをコピーする(a.Applyとする)
+ a.Applyの正しい位置に解決したい型を入れる
  (Hoge(@Ta, Int) と Hoge(@Te, Int)を同型にしたければRkGenericEntryの箇所はnullを入れる)
+ Namespaceからa.Applyと同じ配列のApplyを探す
+ ユニークであればNamespaceに入れ、すでにあればそれを返す

正しい位置に解決したい型をいれるのが難しい
struct Hoge(@T1, @T2, @T3)            # Hoge(@T1,@T2,@T3)     Apply(nil,nil,nil)ができる
sub Foo(@T4, @T5) Hoge(Int, @T4, @T5) # Hoge(Int,@T4,@T5)     Apply(Int,nil,nil)ができる
sub Bar(@T6) Foo(String, @T6)         # Hoge(Int,String,@T6)  Apply(Int,String,nil)ができる
sub Baz(@T7) Bar(@T7)                 # Hoge(Int,String,@T7)  Apply(Int,String,nil)ができる
var a = Baz(Char)                     # Hoge(Int,String,Char) Apply(Int,String,Char)ができる
これを@T7から見ると@T3の位置に直接つながるか、@T6->@T5->@T3のようにつながりHogeの3番目に入ることを
決定できないといけない

var t3 = Hoge.DefineGeneric("@T3") # t3 には3番目の位置であるマーク
var t4 = Foo.DefineGeneric("@T4")  # t4 にはFooの1番目の位置であるマーク
var t5 = Foo.DefineGeneric("@T5")  # t5 にはFooの2番目の位置であるマーク

var foo_return = Hoge.FixedGeneric("@T1" => Int, "@T2" => t4, "@T3" => t5)
# ここで@T2とt4を、@T3とt5を結び付けられる

.CILで関数型を実装する方法

CILでクロージャを見込んだ関数型を実装するためにはソースを変換する

var a = 1
func({x} => x + a)
を定義するとき

これではいけない、anonymous_functionにaをbindできていない
ldc.i4.1
stloc a
ldftn anonymous_function(int32)
call func

CILでは関数にバインドはできないのでクラスを作ってaをフィールドにする
高階関数はメソッドにする
class Anonymous
{
	var a: int32
	sub anonymous_function(x: int32) int32
	{
		ldarg.1 # x
		ldarg.0 # self.a
		ldfld Anonymous::a
		add # x + self.a
		ret
	}
}
newobj Anonymous::.ctor # var obj = Anonymous()
stloc obj
ldloc obj # obj.a = 1
ldc.i4.1
stfld Anonymous::a
ldloc obj # obj.anonymous_function
ldftn anonymous_function(int32)
call func # func(obj.anonymous_function)


クロージャが入れ子になるともう少し複雑になる

var a = 1
var f1 = {x} =>
	return({y} => x + y + a)
func(f1(2)(3))

案1 クロージャのメンバに変数を持つ ※ボツ

案2 クロージャが手を出す変数を集めたクラス(Frame)を作る
struct Frame
	var a: int32
	var x: int32
class closure1
	var frame: Frame
	sub f1(x: int32) {int32}=>int32
		frame.x = x
		var closure = closure2()
		closure.frame = self.frame
		return(closure.anonymous_function)
class closure2
	var frame: Frame
	sub anonymous_function(y: int32) int32
		return(frame.x + y + frame.a)
var obj1 = closure1()
frame    = Frame()
frame.a  = 1
obj1.frame = frame
func(obj1.f1(2)(3))

ポイントは案1と大体同じ
一見コード量は多いが変数がクロージャに参照されていればframe
それ以外はローカル変数、と所属先を簡単に求めることができ単純になる
案1の欠点であるclosure2の無駄な生成コストが比較的まし


クロージャが参照しうる変数を一括でframeにまとめるため
無駄な参照が残ってしまいGCが不利になる
var a = 1
var b = 2
var f1 = {x} =>
	if x > 2
		return({y} => x + y + a)
	else
		return({y} => x + y + b)
func(f1(0))
この場合、「{y} => x + y + b」が戻り値になるが
同一フレームにaも一緒におり、必要ないはずのaがGCされない


案3 クロージャが手を出す変数を集めたクラス(Frame)を作る
クロージャに手を出す関数の引数にFrameを取りbindを実装する

sub f1(x: Int) {}
	var y = 1
	return(f2)
	sub f2()
		var z = 2
		print(f3())
		sub f3() Int
			return(x + y + z)
↓
sub f1(x: Int) {}
	var frame = f1_Frame()
	frame.x = x
	frame.y = 1
	return(f2.bind(frame)) # return(bind(f2, frame))にするか？
	sub f2(c1: f1_Frame)
		var frame = f2_Frame()
		frame.z = 2
		print(f3.bind(c1, frame)()) # return(bind(f3, c1, frame))にするか？
		sub f3(c1: f1_Frame, c2: f2_Frame) Int
			return(c1.x + c1.y + c2.z)


2016.02.14 案3を実装する
CILに翻訳する場合、bindの実装を以下のような関数として実装する

Function curry(Of T1, T2, ... Tn, R)(f As Func(Of T1, T2, ... Tn, R), var As T1) As Func(Of T2, ... Tn, R)
	
	Return Function(x2, ...) f(var, x2, ...)
End Function


..無名関数とクロージャ

無名関数とクロージャは今回次のように定義する

無名関数・・・名前付きでない関数のこと
クロージャ・・・関数の外の変数を参照する関数のこと

以下はのfは全て無名関数だということにする
* var f = sub (x) x + x # 名前がついていないので無名関数ということにする、外の変数を参照してないのでクロージャではない
* sub x() {}
      return(x)
  var f = x() # 関数の戻り値には名前がついてないので無名関数ということにする、外の変数を参照してないのでクロージャではない


以下はのfは全てクロージャだということにする
* sub f(x) x + y # 外の変数を参照しているのでクロージャ
* var f = sub (x) x + y # 外の変数を参照しているのでクロージャ、無名関数でもある
* sub x() {}
      return(y)
  var f = x() # 外の変数を参照しているのでクロージャ、関数の戻り値には名前がついてないので無名関数でもある
* sub f() {}
      z = z + 1
      sub y(a) a + a 
      return(y)
  var fx = f() # fはクロージャだが、yはクロージャのインナー関数でクロージャではない

実装方法によるための区分で
無名関数は呼び出し時にRkFunction.Nameが無名になる、Translater.Translateが処理することになる
クロージャは型解決の前に呼び出すことになる、Closure.Captureで関数にクロージャであるというフラグを付け
Translater.Translateで処理することになる

あとラムダ式は無名関数のシンタックスシュガーということにする
RkLambdaCallを作ったが今現在は無名関数の入れ物にしか使ってない、対応はあとで考える

.パーサのEOL読み込み問題

現在のLexは次にParserがEOLよ要求する場合のみEOLを渡すように作っている
構文定義はおおむねこんな感じ
| start : program_begin uses stmt END
| uses  : void
|       | uses use EOL
| use   : USE var
| stmt  : void
|       | stmt line
| line  : expr EOL

これに対してソースこんなソースでuseの下に1行空けると構文エラーになる、なぜか
| use Test
| 
| print(1)

Lexは「USE VAR EOL EOL_2 VAR '(' NUM ')'」のようにスキャンする
なぜEOL_2が発生するのか?

まずEOLを要求している時のパーサのスタックは
「program_begin uses USE VAR」であった、これは狙い通り

対してEOL_2を要求している時のパーサのスタックは
「program_begin uses use EOL」であった
まだusesが還元前だが、これは還元時の先読み記号の要求なのでスタックの形は正しい

この時の先読みの受け入れ状態を見ると、確かにEOLが入っている・・・
8.
uses : uses use EOL .
  reduce -> uses : uses use EOL . [USE, '(', LET, SUB, VAR, STR, NUM, '{', IF, BEGIN, END, STRUCT, EOL]

ということで晴れてEOL_2をLexが読み込んで
「program_begin uses use EOL [EOL_2]」
「program_begin uses [EOL_2]」パーサはusesを還元する

この状態になるとEOLは受け入れられない
127.
uses : uses . use EOL
use : . USE namespace
use : . USE var EQ namespace
start : program_begin uses . stmt END
stmt : . void
stmt : . stmt line
void : .
  reduce -> void : . ['(', LET, SUB, VAR, STR, NUM, '{', IF, BEGIN, END, STRUCT]
  shift use, goto 7
  shift void, goto 13
  shift USE, goto 129
  shift stmt, goto 128

というわけで8番の先読み記号がおかしい
8番の先読み記号はどこから来たのか??
127番を見てみても先読みEOLを受け入れるわけがない


2016.03.07 解決
先読み記号は必ずシフトできるわけではないので、しょうがない
(前述の例は先読みEOLがなくてもよさそうだがアルゴリズム上回避不可)

例えばこんなケースで合法的に先読み記号を間違える
| start : A x EOL $EOF
|       | B x $EOF
| x     : C
この場合「x : C . [$EOF, EOL]」となるが、読み込み記号がBで始まる場合EOLの先読みなんて無い
ただ先読み記号で状態が増えるわけではないので、若干誤判定はありうる

EOLが2度続く場合は2個目以降を捨てるようLexを改造する


.ToDo

! テストケースのチェック自動化
! 組み込み型(Int、Float、Bool、Array、Char、String、Date)
  配列
! 四則演算(Intのみ対応)
  比較演算
o 関数呼び出し
  メソッド呼び出し
  演算子定義
! クロージャ変換
! 関数型の引数、戻り値
  部分適用
! 関数の総称型対応(段階を踏むケースは未対応 sub f(@T,@R), f2(@T) = f(1, @T), f2(2))
o 構造体のnew
! 構造体の総称型対応
  構造体の継承
  構造体のキャスト
  別型への型変換(IntからFloatなど)
! if文(ifのcond部分にカッコをつけるか検討)
  ネームスペースの実装
  複数ファイルからのコンパイル
  .NETのインポート
  コマンドラインオプションをArchitectureへの適用
  コンパイルエラーメッセージ
